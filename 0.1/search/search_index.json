{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastCLAM","text":"<p>FastAPI for CLAMS</p>"},{"location":"#install","title":"install","text":"<p>Clone the repository</p> <pre><code>git clone https://github.com/WGBH-MLA/FastCLAM\ncd FastCLAM/\n</code></pre>"},{"location":"#poetry-recommended","title":"Poetry (Recommended)","text":"<p>Install with poetry</p> <pre><code>poetry install\n</code></pre>"},{"location":"#pip","title":"Pip","text":"<pre><code>pip3 install .\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#fastclam--fastclam","title":"FastCLAM","text":"<p>FastAPI for CLAMS</p> Example <p>Run the server:     <code>$ uvicorn fastclam.app</code></p> <p>Use the API docs to make requests:     localhost:8000/docs</p>"},{"location":"reference/app/","title":"App","text":""},{"location":"reference/app/#fastclam.app.generate_source","title":"<code>generate_source(files)</code>","text":"<p>Generate a new source MMIF from multiple input files</p> Source code in <code>fastclam/app.py</code> <pre><code>@app.post('/source')\ndef generate_source(files: Inputs) -&gt; dict:\n\"\"\"Generate a new source MMIF from multiple input files\"\"\"\n    log.info(f'sourcing media {files.files}')\n    mmif = generate_source_mmif(files.files)\n    json_value = loads(str(mmif))\n    log.debug(f'sourced: {json_value}')\n    return json_value\n</code></pre>"},{"location":"reference/app/#fastclam.app.home","title":"<code>home()</code>","text":"<p>Return version info</p> Source code in <code>fastclam/app.py</code> <pre><code>@app.get('/')\ndef home() -&gt; dict:\n\"\"\"Return version info\"\"\"\n    return {'FastCLAM': __VERSION__}\n</code></pre>"},{"location":"reference/app/#fastclam.app.run_pipeline","title":"<code>run_pipeline(pipeline)</code>","text":"<p>Run a list of media through a list of apps</p> <p>Sources all input files into the same input MMIF</p> Source code in <code>fastclam/app.py</code> <pre><code>@app.post('/pipeline')\ndef run_pipeline(pipeline: Pipeline) -&gt; list | dict | str:\n\"\"\"Run a list of media through a list of apps\n\n    Sources all input files into the same input MMIF\"\"\"\n    log.info(f'Starting pipeline {pipeline}')\n    input_mmif = generate_source(Inputs(files=pipeline.files))\n    output_mmif = None\n    for app in pipeline.apps:\n        log.debug(f'Running {pipeline.files} through {app}')\n        response = requests.post(app, json=output_mmif or input_mmif)\n        log.debug(f'received response {response.status_code}, {response.headers}')\n        if response.status_code != 200:\n            log.error(f'Bad response from {app} with {pipeline.files}')\n            log.debug(response.content)\n            raise HTTPException(\n                status_code=response.status_code,\n                detail=f'Unsuccessful response from {app}: {response.status_code} - {response.content}',\n            )\n        content_type = response.headers.get('Content-Type')\n        if 'application/json' in content_type:\n            try:\n                output_mmif = response.json()\n            except JSONDecodeError as e:\n                log.error(f'Error parsing JSON: {e}')\n                log.debug(response.content)\n        elif 'application/xml' in content_type:\n            try:\n                log.debug('parsing as xml')\n                output_mmif = ElementTree.fromstring(response.content)\n                output_mmif = ElementTree.tostring(output_mmif)\n            except ParseError as e:\n                log.error(f'Error parsing XML: {e}')\n                log.debug(response.content)\n                raise MMIFException(\n                    status_code=499,\n                    detail=f'Failed to parse XML from {app}: {response.status_code} - {response.content}',\n                )\n\n    log.info(f'Ran {len(pipeline.files)} files through {len(pipeline.apps)} apps')\n\n    return output_mmif\n</code></pre>"},{"location":"reference/models/","title":"Models","text":"<p>Models</p> <p>Pipeline validation models</p>"},{"location":"reference/models/#fastclam.models.Inputs","title":"<code>Inputs</code>","text":"<p>         Bases: <code>BaseModel</code></p> <p>Inputs</p> <p>Accepts list of files as input</p> <p>Attributes:</p> Name Type Description <code>files</code> <code>List[str]</code> <p>A List of file paths as strings</p> Source code in <code>fastclam/models.py</code> <pre><code>class Inputs(BaseModel):\n\"\"\"Inputs\n\n    Accepts list of files as input\n\n    Attributes:\n        files: A List of file paths as strings\n    \"\"\"\n\n    files: List[str]\n</code></pre>"},{"location":"reference/models/#fastclam.models.Pipeline","title":"<code>Pipeline</code>","text":"<p>         Bases: <code>Inputs</code></p> <p>Pipeline</p> <p>A simple pieline validator, based on Inputs</p> <p>Attributes:</p> Name Type Description <code>apps</code> <code>List[AnyHttpUrl]</code> <p>A List of apps to run, where each appp is a url string for the service</p> Source code in <code>fastclam/models.py</code> <pre><code>class Pipeline(Inputs):\n\"\"\"Pipeline\n\n    A simple pieline validator, based on Inputs\n\n    Attributes:\n        apps: A List of apps to run, where each appp is a url string for the service\n    \"\"\"\n\n    apps: List[AnyHttpUrl]\n</code></pre>"}]}